<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>PCNN</groupId>
	<artifactId>PCNN</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<build>
		<sourceDirectory>src</sourceDirectory>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<configuration>
					<mainClass>edu.kaist.mrlab.nn.pcnn.rest.Main</mainClass>

					<!-- <mainClass>edu.kaist.mrlab.nn.pcnn.prepro.SentencePreprocessorWithTokenizer</mainClass> -->
					<!-- <mainClass>edu.kaist.mrlab.nn.pcnn.prepro.TrainTestSetSeperator</mainClass> -->
					<!-- <mainClass>edu.kaist.mrlab.nn.pcnn.Learner</mainClass> -->
					<!-- <mainClass>edu.kaist.mrlab.nn.pcnn.Testor</mainClass> -->
					<!-- <mainClass>edu.kaist.mrlab.nn.pcnn.rest.Main</mainClass> -->
					<cleanupDaemonThreads>false</cleanupDaemonThreads>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<properties>
		<!-- Change the nd4j.backend property to nd4j-cuda-7.5-platform or nd4j-cuda-8.0-platform 
			to use CUDA GPUs -->
		<nd4j.backend>nd4j-native-platform</nd4j.backend>
		<!-- <nd4j.backend>nd4j-cuda-8.0-platform</nd4j.backend> -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<shadedClassifier>bin</shadedClassifier>

		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<java.version>1.8</java.version>
		<nd4j.version>0.8.0</nd4j.version>
		<dl4j.version>0.8.0</dl4j.version>
		<datavec.version>0.8.0</datavec.version>
		<arbiter.version>0.8.0</arbiter.version>
		<rl4j.version>0.8.0</rl4j.version>

		<!-- For Spark examples: change the _1 to _2 to switch between Spark 1 
			and Spark 2 -->
		<dl4j.spark.version>0.8.0_spark_1</dl4j.spark.version>
		<datavec.spark.version>0.8.0_spark_1</datavec.spark.version>

		<!-- Scala binary version: DL4J's Spark and UI functionality are released 
			with both Scala 2.10 and 2.11 support -->
		<scala.binary.version>2.11</scala.binary.version>

		<guava.version>19.0</guava.version>
		<logback.version>1.1.7</logback.version>
		<jfreechart.version>1.0.13</jfreechart.version>
		<jcommon.version>1.0.23</jcommon.version>
		<maven-shade-plugin.version>2.4.3</maven-shade-plugin.version>
		<maven-compiler-plugin.version>3.6.1</maven-compiler-plugin.version>
		<exec-maven-plugin.version>1.4.0</exec-maven-plugin.version>
		<maven.minimum.version>3.3.1</maven.minimum.version>
		<javafx.version>2.2.3</javafx.version>
		<javafx.runtime.lib.jar>${env.JAVAFX_HOME}/jfxrt.jar</javafx.runtime.lib.jar>
		<aws.sdk.version>1.11.109</aws.sdk.version>
		<jackson.version>2.6.6</jackson.version>
		<scala.plugin.version>3.2.2</scala.plugin.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.nd4j</groupId>
				<artifactId>nd4j-native-platform</artifactId>
				<version>${nd4j.version}</version>
			</dependency>
			<dependency>
				<groupId>org.nd4j</groupId>
				<artifactId>nd4j-cuda-7.5-platform</artifactId>
				<version>${nd4j.version}</version>
			</dependency>
			<dependency>
				<groupId>org.nd4j</groupId>
				<artifactId>nd4j-cuda-8.0-platform</artifactId>
				<version>${nd4j.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- Dependency for parallel wrapper (for multi-GPU parameter averaging -->
		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-parallel-wrapper_${scala.binary.version}</artifactId>
			<version>${dl4j.version}</version>
		</dependency>

		<!-- ND4J backend. You need one in every DL4J project. Normally define 
			artifactId as either "nd4j-native-platform" or "nd4j-cuda-7.5-platform" -->
		<dependency>
			<groupId>org.nd4j</groupId>
			<artifactId>${nd4j.backend}</artifactId>
		</dependency>

		<!-- Core DL4J functionality -->
		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-core</artifactId>
			<version>${dl4j.version}</version>
		</dependency>

		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-nlp</artifactId>
			<version>${dl4j.version}</version>
		</dependency>

		<!-- deeplearning4j-ui is used for HistogramIterationListener + visualization: 
			see http://deeplearning4j.org/visualization -->
		<dependency>
			<groupId>org.deeplearning4j</groupId>
			<artifactId>deeplearning4j-ui_${scala.binary.version}</artifactId>
			<version>${dl4j.version}</version>
		</dependency>

		<!-- Force guava versions for using UI/HistogramIterationListener -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
		</dependency>

		<!-- datavec-data-codec: used only in video example for loading video data -->
		<dependency>
			<artifactId>datavec-data-codec</artifactId>
			<groupId>org.datavec</groupId>
			<version>${datavec.version}</version>
		</dependency>

		<!-- Used in the feedforward/classification/MLP* and feedforward/regression/RegressionMathFunctions 
			example -->
		<dependency>
			<groupId>jfree</groupId>
			<artifactId>jfreechart</artifactId>
			<version>${jfreechart.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jfree</groupId>
			<artifactId>jcommon</artifactId>
			<version>${jcommon.version}</version>
		</dependency>

		<!-- Used for downloading data in some of the examples -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.3.5</version>
		</dependency>

		<dependency>
			<groupId>com.twitter.penguin</groupId>
			<artifactId>korean-text</artifactId>
			<version>4.4</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/edu.stanford.nlp/stanford-corenlp -->
		<!-- <dependency> <groupId>edu.stanford.nlp</groupId> <artifactId>stanford-corenlp</artifactId> 
			<version>3.8.0</version> </dependency> -->

		<!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1.1</version>
		</dependency>

		<!-- Jersey Rest -->

		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-server</artifactId>
			<version>2.17</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet-core</artifactId>
			<version>2.17</version>
		</dependency>

		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-grizzly2</artifactId>
			<version>1.18</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.grizzly</groupId>
			<artifactId>grizzly-http-server</artifactId>
			<version>2.2.16</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.grizzly</groupId>
			<artifactId>grizzly-http</artifactId>
			<version>2.2.16</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.grizzly</groupId>
			<artifactId>grizzly-framework</artifactId>
			<version>2.2.16</version>
		</dependency>

	</dependencies>
</project>